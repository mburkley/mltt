/*
 *  Experimental program to apply bandpass FIR
 */
/*  Generated by https://fiiir.com/
 *
 *  441,441,2205,2205 Hz, hamming filter
 */
#include <stdio.h>
#include <math.h>
#include <unistd.h>

#include "types.h"
#include "cassette.h"
#include "wav.h"

#define MAX_FILTER_COUNT 10000

static double coeffs[MAX_FILTER_COUNT];

static int16_t cassetteData[MAX_FILTER_COUNT];
static int filterCount;
static int cassetteDataPos;
static int cassetteSampleCount;
static int samplesRead;
static double gain = 1.0;
static bool showWav;

static bool readCoeffFile (const char *name)
{
    FILE *fp;
    char s[1024];

    if ((fp = fopen (name, "r")) == NULL)
    {
        printf ("Failed to open %s\n", name);
        return false;
    }

    while (!feof (fp))
    {
        if (!fgets (s, sizeof s, fp))
            break;

        if (filterCount >= MAX_FILTER_COUNT)
        {
            printf ("Max coefficients %d exceeded\n", filterCount);
            return false;
        }

        if (sscanf (s, "%lf", &coeffs[filterCount++]) < 1)
        {
            printf ("Coefficient parse failure on %s", s);
            return false;
        }
    }

    fclose (fp);
    return true;
}

bool cassetteRead (wavState *wav, int16_t *sample)
{
    if (cassetteSampleCount-- == 0)
        return false;

    *sample = wavReadSample (wav);

    cassetteData[cassetteDataPos++] = *sample;
    cassetteDataPos %= filterCount;
    samplesRead++;

    return true;
}

int16_t cassetteFIR(int16_t sample)
{
    int i;

    /*  The first filterCount samples are unfiltered */
    if (samplesRead < filterCount)
        return sample;

    double acc = 0;

    for (i = 0; i < filterCount; ++i)
        acc += cassetteData[(cassetteDataPos+i) % filterCount] * coeffs[i];

    acc *= gain;
    // printf ("%d->%lf : ", sample, acc);
    if (acc < -32768 || acc > 32767)
        gain *= 0.95;

    return (int16_t) acc;
}

int main(int argc, char *argv[])
{
    int16_t sample;
    const char * coeffFile = "coeff.txt";
    wavState *wavIn;
    wavState *wavOut;
    char c;

    while ((c = getopt(argc, argv, "c:w")) != -1)
    {
        switch (c)
        {
            case 'c' : coeffFile = optarg; break;
            case 'w' : showWav = true; break;
            default: printf ("Unknown option '%c'\n", c);
        }
    }

    if (argc - optind < 2)
    {
        printf ("usage: %s [-c <coeff-file>] <in-wav-file> <out-wav-file>\n", argv[0]);
        return 1;
    }

    if (!readCoeffFile (coeffFile))
        return 1;

    if ((wavIn = wavFileOpenRead (argv[optind], showWav)) == NULL)
        return 1;

    if ((wavOut = wavFileOpenWrite (argv[optind+1], CASSETTE_BITS_PER_SAMPLE)) == NULL)
        return 1;

    cassetteSampleCount = wavSampleCount (wavIn);
    while (1)
    {
        if (!cassetteRead (wavIn, &sample))
            break;

        sample = cassetteFIR (sample);
        wavWriteSample (wavOut, sample);
    }

    wavFileClose (wavIn);
    wavFileClose (wavOut);

    return 0;
}

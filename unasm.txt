0024 @-@- Reset vector entry point @-@+ Load GROM read data address
0028 @+ Initialise system flags
002C @+ Load VDP write address
005C @+ Fetch GROM data into R4
0060 @-@- GPL interpreter, R6=GROM address@-
006A @+ Clear GPL status condition bit
0070 @-@- GPL Interpreter@-@; Enable VDP interrupt
0074 @+ Disable interrupts
0078 @+ Fetch byte from GPL
0086 @-@- Negative interpreter code@-
00CC @-@-GPL CGE:@-
00D6 @-@-GPL CH:@-
00DA @-@-GPL CHA:@-
00DE @-@-GPL CGT:@-
00E2 @-@-GPL CLOG:@-
00EA @-@-GPL CZ:@-
0104 @-@-GPL B:@-
010E @-@-GPL BS:@-
011A @-@- GPL BR@-@; Fetch GPL status
0136 @-@-GPL ABS:@-
013A @-@-GPL NEG:@-
013E @-@-GPL CLR:@-
0140 @-@-GPL INV:@-
0144 @-@-GPL FETCH:@-
0162 @-@-GPL CASE:@-
016E @-@-GPL PUSH:@-
0182 @-@-GPL DECT:@-
0184 @-@-GPL INCT:@-
0186 @-@-GPL SUB:@-
0188 @-@-GPL ADD:@-
0190 @-@-GPL AND:@-
0196 @-@-GPL OR:@-
019A @-@-GPL XOR:@-
019E @-@-GPL ST:@-
01A2 @-@-GPL EX:@-
01B0 @-@-GPL SRA:@-
01B4 @-@-GPL SLL:@-
01B8 @-@-GPL SRL:@-
01C2 @-@-GPL SRC:@-
01CE @-@-GPL MUL:@-
01EA @-@-GPL DIV:@-
0252 @+ Return @+
0270 @-@-GPL subinterpreter 0x00 to 0x1f:@-
027A @-@-GPL RAND:@-
029E @-@-GPL BACK:@-
02B2 @-@- Keyboard scan@-
02B6 @+ Save GROM address
02BC @+ Write alpha lock
02BE @+ Get keyboard scan mode
02DA @+ Compare to >0002
02E0 @+ Keyboard mode 0
02E6 @+ Debounce (3,4,5=0,1,2)
032E @+ Load scan key value
0336 @+ CRU base to keyboard column select
033C @+ Write keyboard column address
0346 @+ Read keyboard row values
0356 @+ Jump if no key
0380 @+ Key pressed?
03F2 @+ GROM table CNTRL
03FA @+ GROM table FCTN
0402 @+ GROM table SHIFT
040A @+ GROM table small letters
040E @+ Key value
041C @+ Read (key?) value from GROM
042E @+ Small letter?
044E @+ Is R0 between >10 and >1F ?
0450 @+ Is R0 >5F ?
0478 @+ Write ASCII of key detected code (>FF = no key)
0492 @+ Retrieve return address saved earlier
0498 @-@-Time delay:@-
04A2 @-@-Compare R0 with EQU?:@-
04B0 @+ Return@+
04DE @-@-GPL FMT:@-
05A2 @-@-GPL ALL:@-
05C8 @-@-GPL I/O:@-
05D6 @-@-GPL I/O sound:@-
05E8 @-@- CRU input@-
05EA @-@- CRU output@-
05F0 @+ Number of bits into R2
05F2 @+ left one nybble
05F8 @+ Or bit count with command LDCR *R2
0608 @-@-GPL XML:@-
061E @-@- GPL MOVE@-
065E @+0456 B *6 Execute source
0660 @-Source ROM or RAM:@+ Fetch
0662 @+0457 B *7 Execute destination
0664 @-Source VDP RAM:@+ Write address
066C @+ Fetch data
0670 @+ Execute destination
0672 @-@- Fetch bytes from GROM@-
06BA @-@- Store to VDP RAM@-
06BE @+ Writing
06C4 @+ Next address
06C6 @+ Write data
06CA @+ End ?
06CC @+ No, go on
06CE @+ Return GPL interpreter, set condition bit and
06D0 @+ GROM address from substack
06D2 @-@- GPL COINC@-
077A @-@- GPL addressing modes@-
0842 @-@- Pop GROM address from sub stack@-
0858 @+ Return@+
0864 @-@- Push GROM address to sub stack@-@+ Inc stack ptr
087E @+ Return@+
0900 @-@- Interrupt Level 1 Service Routine@-@+ disabled interrupts while in ISR
0904 @+ switch to GPL workspace
0908 @+ reset CRU base
090A @+ Bit >0020 set - Cassette interrupt?
090E @+ Not cassette, jump
0914 @+ Test if VDP interrupt
0916 @+ If low, then VDP interrupt, so jump
094A @+ Clear and re-arm VDP interrupt
094C @+ Get interrupt flag
095C @+ Get # of sprites
09EC @+ Get # of sounds bytes
0A6A @+ Set KBD col select CRU addr
0A6E @+ Write keyboard column select bits to CRU
0A72 @+ WHY?
0A74 @+ Set KBD row value CRU addr
0A78 @+ Read keyboard row bits from CRU
0A7A @+ Check if value is >1100 (quit key)
0A84 @+ Get VDP status
0A8E @+ Screen timeout counter
0A8A @+ Switch to interrupt WS
0A92 @-@- Interrupt Level 2 Service Routine@-
0AA8 @+ Switch to GPL WS
0AAC @+ Increment(?) VDP interrupt timer
0AB0 @+ User defined interrupt
0ABE @+ ISR Return@+
0B3E @+ CZC >1FFF
1350 @+ Load timer >0011 and set clock bit
13CA @+ Initial tape input state to 0
13CC @+ CRU base to zero
13D4 @+ Disable VDP interrupts
13D6 @+ ?? Why - nothing uses bit 12 ??
13DC @+ Disable periph interrupts?
13DE @+ Enable timer interrupts
1404 @-@- Interrupt cassette:@-@+ Set 9901 interrupt mode
1406 @+ Timer interrupt reset
1408 @+ R1 Negative?
140C @+ INTWS
1410 @+ Compare *R14 with>10FF (JMP -2)
1416 @+ Trick, jump from infinite loop
1418 @+ End@+
141E @+ R6 GPLWS becomes new R14
1426 @-@- Cassette verify (GPL I/O):@-@+ Set flag verify
142A @+ Read VDP
142E @-@- Cassette read@-@+Flag read (with >0010)
1432 @+ Write VDP
1436 @+ ?? Bit timer ??
143A @+ Fetch pointer, write VDP address
143E @+ Data buffer in R7
1442 @+ Set condition bit GPL status (| > 20)
1448 @+ Waiting loop reception
144C @+ Enable interrupt
1450 @+ Interrupt done new PC
1454 @+ Bit duration
145C @+ Count down loop
145E @+ End with error
1460 @+ Expected minimum preamble or block len=48
1468 @+ double
146E @+ CS1 Receive character (1), go on
1470 @+ CS1 Receive no character (0), once again
1472 @+ CS1 At least R2 character (preamble or block header sync)
1474 @+ No, next character
147E @+ CS1 start the timer
1484 @+ Receive character
1488 @+ Receive change (bit)
148A @+ No change
148C @+ 8 Bits?
148E @+ Once more
1492 @+ CS1 Read time remaining on timer
1494 @+ Subtract remaining time from original time
1498 @+ remain *= 4
149A @+ add remain to make it remain * 5
149C @+ divide by 64
149E @+ CS1 Set LSB to enable clock
14A2 @+ Trick return
14A6 @+ Check if acceptable value
14AC @+ Read bit
14B0 @+ Receive 1 bit
14B4 @+ No change
14B6 @+ Go on 7 bits
14BE @+ Once more
14C0 @+ All 7?
14C2 @+ No, go on
14C4 @+ Trick return
14C8 @+ Data block
14CC @+ Set error
14D2 @+ Prepare address
14D6 @+ Receive number of data blocks
14DA @+ Enough storage
14DC @+ End with error
14DE @+ New number data blocks
14E4 @+ Fetch 2nd time
14EA @+ Go on with 1st data block
14EC @+ Clear 1st byte
14F0 @+ Negate
14F2 @+ Fetch check sum
14F6 @+ O.k. (Addition must result in 0,if data o.k)
14F8 @+ Already the 2nd time
14FA @+ End with error
14FC @+ Write VDP address
1500 @+ Flag R5
1504 @+ Once more from beginning
1506 @+ CS1 check remaining data blocks?
1508 @+ No, jump
150A @+ Receive 49 character
150E @+ New PC over interrupt
1512 @+ Fetch byte
1516 @+ All ?
151A @+ New VDP address
151E @+ Write address
1528 @+ CS1 All data blocks
152C @+ End
152E @+ >40 Character
1534 @+ Receive
1540 @+ Verify
1544 @+ O.k. Jump
154A @+ End of data blocks ?
154E @+ CS1 Byte to VDP
1552 @+ End of data block ?
1558 @+ Clear condition bit GPL status
155E @+ Clear interrupt flags
1566 @+ CRU reset
156E @+ To GPL interpreter
1572 @-@- Wait for timer expire@+ Save return address
1574 @+ Inf loop, wait for interrupt
1576 @+ Check bit status, update R1
157A @+ No change from R1
157C @+ Set flag for ISR
1580 @+ Is it currently a 1 or 0 ? CZC R1 to >00FF
1586 @+ Mag tape in, Wait for not zero
158C @+ Mag tape in, Wait for zero
1590 @+ CS1 Restart the timer
1596 @+ Clear ISR flag
159A @+ CS1 XOR with>00FF, flip R1
159E @+ Return
15A0 @-@- Receive one byte@-@+ CS1 fetch 8 bits
15A4 @+ Initialise byte
15A6 @+ save return
15A8 @+ next bit
15AA @-@-Receive byte in R4 and built check sum in R7 @+ Fetch 1 bit
15AE @+ See TB entry
15B0 @+ CS1 Set bit
15B4 @+ CS1 All 8 bits?
15B6 @+ CS1 Add byte to checksum
15B8 @+ Return
15BA @-@- Mag tape in. Check if bit has changed from R1 (00 = clear, FF=set)@- If changed then flip R1 and return *B11 + 2
15BC @+ jump if bit is set
15BE @+ CZC >00FF : is R1 == >0000 ?
15C2 @+ bit clear and R1=0000, no change, jump
15C4 @+ CS1 bit changed, flip R1
15C8 @+ Changed, Return to caller
15CA @+ CZC >00FF : is R1 == >0000 ?
15CE @+ bit set and R1=0000, change
15D0 @+ No change, Return to caller +2
4078 @- Get highest VDP addr
407E @+ subtract >828 bytes from addr
4082 @+ Write the new ram top back to reserve space
408C @+ Allocate >828 bytes
4090 @+ Write >00 to VDP RAM
4096 @+ Finished?  Loop and do more
40DA @-@- Set up address in R0 to VDP addr@-@+ Add VDP write bit
40E0 @+ Write addr high byte
40E4 @+ Write addr low byte
410A @+ Track 00
410C @+ Request track
4114 @+ Side 0
414A @+ Divide by 9 to get tracks and sectors
4156 @+ Save byte to VDP
416C @+ Write E1 (~1E = seek, head, verify, rate2)
417A @+ Write 3F (~C0 = read ID)
4182 @+ Read and discard track
4186 @+ Interested in 4 of the 6 bytes
418A @+ Read side
4190 @+ Read sec, sec-len, crc1, crc2
419C @+ Shift seek error bit into carry
419E @+ jump if seek error
41A0 @+ jump if crc error bit set
41A4 @+ jump if track0 / lost data
41C8 @+ Call ??? with param >23
41E0 @+ Write 77 (~88 = read sector)
41E6 @+ Read 256 bytes
4214 @+ Read a byte from disk
421A @+ Store byte to VDP
421E @+ Read byte from disk
4224 @+ Store byte to VDP
422A @+ If not all 256 received then loop
422E @+ Reenable ints and wait for not busy
4260 @+ Write 57 (~A8 = write sector)
4300 @+ Write A5 (~5A = step-in)
432E @+ Write 3F (~C0 = read-ID)
4434 @+ Write 0B (~F4 = write track)
4480 @+ Turn on interrupts
4482 @-@- wait until drive not busy@-@+ Read drive status
4486 @+ Drive data bus is inverted
4488 @+ is not ready bit set?
448A @+ move BUSY bit into carry
448C @+ if BUSY, go back and read status again
448E @+ Return@+
4526 @+ Write F5 (~0A = restore)
4544 @-@- Read status@-
4548 @+ bus is inverted
454A @+ Rotate track0 bit into carry
454C @+ Jump if track0
4552 @+ Return@+
4576 @+ Write 4 bytes of 00
45B8 @+ Write 2F (~D0 = abort (don't force interrupt))
45CA @-@- Wait for ready and write command@+cmd passed as param
45CC @+ Fetch status byte
45D0 @+ Shift out track0/lost data
45D6 @+ Jump if set
45D8 @+ Load loop counter
45DC @+ Waste some time
45DE @+ Waste some time
45E0 @+ Dec loop counter
45E2 @+ Repeat
45E4 @+ Write the command
45EA @+ Waste some time
45EC @+ Waste some time
45EE @+ return@+
45F0 @-@- Select drive and write some addr to VDP?@-
45F2 @+ Get drive selected?
4600 @+ Get 2nd half DSRNAM?  >8358
4604 @+ subtract 10
4614 @-@+ Set up VDP WRITE addr
4618 @+ Clear any VDP cmd bits other than R/W
461E @+ vdp READ addr
4624 @+ Low byte
4628 @+ High byte
462A @+ Clear VDP addr write flag
462E @+ Return@+
